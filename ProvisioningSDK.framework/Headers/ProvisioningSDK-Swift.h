// Generated by Apple Swift version 4.0.2 (swiftlang-900.0.69.2 clang-900.0.38)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_attribute(external_source_symbol)
# define SWIFT_STRINGIFY(str) #str
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name) _Pragma(SWIFT_STRINGIFY(clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in=module_name, generated_declaration))), apply_to=any(function, enum, objc_interface, objc_category, objc_protocol))))
# define SWIFT_MODULE_NAMESPACE_POP _Pragma("clang attribute pop")
#else
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name)
# define SWIFT_MODULE_NAMESPACE_POP
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

SWIFT_MODULE_NAMESPACE_PUSH("ProvisioningSDK")

SWIFT_CLASS("_TtC15ProvisioningSDK11Credentials")
@interface Credentials : NSObject
@property (nonatomic, copy) NSString * _Nonnull username;
@property (nonatomic, copy) NSString * _Nonnull password;
@property (nonatomic, copy) NSString * _Nonnull hsp;
- (nonnull instancetype)initWithUsername:(NSString * _Nonnull)username password:(NSString * _Nonnull)password hsp:(NSString * _Nonnull)hsp OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

enum ManagedNetworkType : NSInteger;
@class NSCoder;

SWIFT_CLASS("_TtC15ProvisioningSDK14ManagedNetwork")
@interface ManagedNetwork : NSObject <NSCoding>
@property (nonatomic, copy) NSString * _Nullable SSID;
@property (nonatomic, copy) NSString * _Nullable fqdn;
@property (nonatomic, copy) NSString * _Nullable vnp;
@property (nonatomic) enum ManagedNetworkType type;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ManagedNetworkType) {
  ManagedNetworkTypeNotManaged = 0,
  ManagedNetworkTypeCaptive = 1,
  ManagedNetworkTypeEAP = 2,
  ManagedNetworkTypeOpen = 3,
};


/// Protocol with the methods needed to create an access token.
SWIFT_PROTOCOL("_TtP15ProvisioningSDK19OauthClientProtocol_")
@protocol OauthClientProtocol
/// Send a request to the server to generate an access token.
/// @param completion A block object to be executed when the task finishes. This block has no return value and takes two arguments: a string with the access token, and an error in case it finishes unsuccessfully describing the error that occurred.
- (void)createAccessTokenWithCompletion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
@end

@protocol ProvisioningSDKDelegate;

SWIFT_CLASS("_TtC15ProvisioningSDK15ProvisioningSDK")
@interface ProvisioningSDK : NSObject
/// Desired initializer to create the ProvisioningSDK instance.
/// warning:
/// The instance of the ProvisioningSDK should be unique. We recommend to create it in the AppDelegate an access to it, or wrap it in a Singleton.
/// \param delegate Delegate used to obtain the credentials.
///
/// \param clientID The client id of the provider.
///
/// \param clientSecret The client secret of the provider.
///
- (nonnull instancetype)initWithDelegate:(id <ProvisioningSDKDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDelegate:(id <ProvisioningSDKDelegate> _Nonnull)delegate clientID:(NSString * _Nonnull)clientID clientSecret:(NSString * _Nonnull)clientSecret OBJC_DESIGNATED_INITIALIZER;
- (void)provideWithClientID:(NSString * _Nonnull)clientID clientSecret:(NSString * _Nonnull)clientSecret;
/// Provision the phone with networks that can connect depending of a particular provider and user.
/// \param completion A closure object to be executed when the task finishes. This closure has no return value and takes two arguments: a BOOL indicating if we need to update the mobile config file, and an error in case it finishes unsuccessfully describing the error that occurred.
///
- (void)provisionVNPWithCompletion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/// Return the array of FPRManagedNetwork instances managed by our framework.
///
/// returns:
/// Array of FPRManagedNetwork instances managed by our framework.
- (NSArray<ManagedNetwork *> * _Nonnull)managedNetworks SWIFT_WARN_UNUSED_RESULT;
/// Return if a network is managed by our framework.
/// \param ssid to check if it is managed.
///
///
/// returns:
/// FPRManagedNetworkTypeOpen if the network is managed of type open, FPRManagedNetworkTypeEAP if the network is managed of type EAP, FPRManagedNetworkTypeNone otherwise.
- (ManagedNetwork * _Nonnull)isNetworkManagedWithSsid:(NSString * _Nonnull)ssid SWIFT_WARN_UNUSED_RESULT;
/// Return VNPs of SSID.
/// \param ssid search VNPS
///
///
/// returns:
/// NSArray of VNPs
- (NSArray<NSString *> * _Nonnull)vnpsSsidWithSsid:(NSString * _Nonnull)ssid SWIFT_WARN_UNUSED_RESULT;
/// Return if a mobile config provisioning file is installed in the device.
///
/// returns:
/// YES if a mobile config provisioning file is installed in the device, NO otherwise.
- (BOOL)isMobileConfigInstalled SWIFT_WARN_UNUSED_RESULT;
/// Return the URL that contains the mobile config provisioning, this URL must be opened in Safari so the user can download it.
/// \param URLScheme Scheme to return to app
///
/// \param country for all Countries set nil
///
/// \param completion A block object to be executed when the task finishes. This block has no return value and takes two arguments: the URL that contains the mobile config provisioning, and an error in case it finishes unsuccessfully describing the error that occurred.
///
- (void)mobileConfigWithURLScheme:(NSString * _Nonnull)URLScheme country:(NSString * _Nonnull)country completion:(void (^ _Nonnull)(NSString * _Nonnull, NSError * _Nullable))completion;
/// Return the URL that contains the mobile config provisioning, this URL must be opened in Safari so the user can download it.
/// \param URLScheme Scheme to return to app
///
/// \param countries Array of Countries
///
/// \param completion A block object to be executed when the task finishes. This block has no return value and takes two arguments: the URL that contains the mobile config provisioning, and an error in case it finishes unsuccessfully describing the error that occurred.
///
- (void)mobileConfigWithURLScheme:(NSString * _Nonnull)URLScheme countries:(NSArray<NSString *> * _Nonnull)countries completion:(void (^ _Nonnull)(NSString * _Nonnull, NSError * _Nullable))completion;
/// Return the modified username from the provision vnp so we can connect to the WISPr.
///
/// returns:
/// Modified username from the provision vnp so we can connect to the WISPr.
- (NSString * _Nonnull)username SWIFT_WARN_UNUSED_RESULT;
/// Clear the provisioning configuration, this includes all internal data and all the managed networks.
/// warning:
/// The mobile config must be removed manually.
///
/// returns:
/// YES if we could remove the provisioning, NO otherwise.
- (BOOL)removeProvisioning SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nullable)getClientProperties SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getTrackedUsersPercentage SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP15ProvisioningSDK23ProvisioningSDKDelegate_")
@protocol ProvisioningSDKDelegate
/// Credentials with the data to generate the networks that it can connect.
/// @return Credentials with the data to generate the networks that it can connect.
- (Credentials * _Nonnull)credentials SWIFT_WARN_UNUSED_RESULT;
@end

SWIFT_MODULE_NAMESPACE_POP
#pragma clang diagnostic pop
